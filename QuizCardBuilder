package com.persistent.training.serialization;

import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.ScrollPaneConstants;

public class QuizCardBuilder {

	public JTextArea question;
	public JTextArea answer;
	public ArrayList<QuizCard> cardList;
	public JFrame frame;

	public static void main(String[] args) {
		QuizCardBuilder builder = new QuizCardBuilder();
		builder.go();

	}

	private void go() {
		//build gui

		frame = new JFrame("Quiz Card Wizard");

		JPanel mainPanel = new JPanel();
		Font bigFont = new Font("sanserif", Font.BOLD, 24 );

		question = new JTextArea(6,20);
		question.setLineWrap(true);
		question.setFont(bigFont);
		question.setWrapStyleWord(true);

		JScrollPane qScroller = new JScrollPane(question);
		qScroller.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		qScroller.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

		answer = new JTextArea(6,20);
		answer.setLineWrap(true);
		answer.setFont(bigFont);
		answer.setWrapStyleWord(true);

		JScrollPane aScroller = new JScrollPane(answer);
		aScroller.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		aScroller.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		
		JButton nextButton = new JButton("Next Card");
		
		cardList = new ArrayList<QuizCard>();
		
		JLabel qLabel = new JLabel("Question");
		JLabel aLabel = new JLabel("Answer: ");
		
		mainPanel.add(qLabel);
		mainPanel.add(aLabel);
		mainPanel.add(qScroller);
		mainPanel.add(aScroller);
		mainPanel.add(nextButton);
		
		nextButton.addActionListener(new NextCardListener());
		
		JMenuBar menuBar = new JMenuBar();
		
		JMenu fileMenu = new JMenu("File");
		
		JMenuItem newMenuItem = new JMenuItem("New");
		JMenuItem saveMenuItem = new JMenuItem("Save");
		newMenuItem.addActionListener(new NewMenuListener());
		saveMenuItem.addActionListener(new SaveMenuListener());
		
		fileMenu.add(newMenuItem);
		fileMenu.add(saveMenuItem);
		menuBar.add(fileMenu);
		frame.setJMenuBar(menuBar);
		frame.getContentPane().add(BorderLayout.CENTER, mainPanel);
		frame.setSize(500, 600);
		frame.setVisible(true);


	}
	
	public class NextCardListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent ev) {
			
			QuizCard card = new QuizCard(Question.getText(), Answer.getText());
			
			ArrayList cardList = new ArrayList();
			cardList.add(card);
			clearCard();

		}

		private void clearCard() {
			Question.setText("");
			Answer.setText("");
			Question.requestFocus();
			
		}

	}

	public class SaveMenuListener implements ActionListener {

		public JFrame frame;
		public ArrayList<QuizCard> cardList;
		@Override
		public void actionPerformed(ActionEvent ev) {

			
			QuizCard card = new QuizCard(Question.getText(),Answer.getText());
			cardList.add(card);
			
			JFileChooser fileSave = new JFileChooser();
			fileSave.showSaveDialog(frame);
			saveFile(fileSave.getSelectedFile());
		}

		private void saveFile(File file) {
			try {
				BufferedWriter writer = new BufferedWriter(new FileWriter(file));
				
			
				for(QuizCard card:cardList) {
					writer.write(card.getQuestion()+" / ");
					writer.write(card.getQuestion()+" / ");
				}
				writer.close();
			} catch (IOException ex) {
				System.out.println("couldnt write the cardlist out");
				ex.printStackTrace();
			}
			
		}

	}
	public class NewMenuListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent ev) {
			
			ArrayList cardList = new ArrayList();
			cardList.clear();
			clearCard();

		}

		private void clearCard() {
			Question.setText("");
			Answer.setText("");
			Question.requestFocus();
			
		}

	}

}
